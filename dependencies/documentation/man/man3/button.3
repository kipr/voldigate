.TH "button" 3 "Wed Sep 4 2024" "Version 1.0.0" "libkipr" \" -*- nroff -*-
.ad l
.nh
.SH NAME
button \- Buttons
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBset_a_button_text\fP (const char *text)"
.br
.ti -1c
.RI "void \fBset_b_button_text\fP (const char *text)"
.br
.ti -1c
.RI "void \fBset_c_button_text\fP (const char *text)"
.br
.ti -1c
.RI "void \fBset_x_button_text\fP (const char *text)"
.br
.ti -1c
.RI "void \fBset_y_button_text\fP (const char *text)"
.br
.ti -1c
.RI "void \fBset_z_button_text\fP (const char *text)"
.br
.ti -1c
.RI "int \fBa_button\fP ()"
.br
.ti -1c
.RI "int \fBb_button\fP ()"
.br
.ti -1c
.RI "int \fBc_button\fP ()"
.br
.ti -1c
.RI "int \fBx_button\fP ()"
.br
.ti -1c
.RI "int \fBy_button\fP ()"
.br
.ti -1c
.RI "int \fBz_button\fP ()"
.br
.ti -1c
.RI "int \fBside_button\fP ()"
.br
.ti -1c
.RI "int \fBblack_button\fP ()"
.br
.ti -1c
.RI "int \fBleft_button\fP ()"
.br
.ti -1c
.RI "int \fBright_button\fP ()"
.br
.ti -1c
.RI "int \fBa_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBb_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBc_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBx_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBy_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBz_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBside_button_clicked\fP ()"
.br
.ti -1c
.RI "int \fBany_button\fP ()"
.br
.ti -1c
.RI "void \fBextra_buttons_show\fP ()"
.br
.ti -1c
.RI "void \fBextra_buttons_hide\fP ()"
.br
.ti -1c
.RI "int \fBget_extra_buttons_visible\fP ()"
.br
.ti -1c
.RI "void \fBset_extra_buttons_visible\fP (int visible)"
.br
.in -1c
.SH "Detailed Description"
.PP 
The functions here allow for interfacing with the digital buttons on the wombat's screen\&. When you run a program using the controller's interface, there are buttons that can be pressed\&. These are the buttons that these functions relate to\&. 
.SH "Function Documentation"
.PP 
.SS "int a_button ()"
Gets the A button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int a_button_clicked ()"
Gets the A button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int any_button ()"
Determines whether or not any of the buttons are pressed\&. 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int b_button ()"
Gets the B button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int b_button_clicked ()"
Gets the A button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int black_button ()"
Gets the black button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBDeprecated\fP
.RS 4
Not present on the Wallaby 
.RE
.PP

.SS "int c_button ()"
Gets the C button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int c_button_clicked ()"
Gets the B button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "void extra_buttons_hide ()"
Hides the X, Y, and Z buttons\&. This is the default\&. 
.PP
\fBSee also\fP
.RS 4
\fBset_extra_buttons_visible\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "void extra_buttons_show ()"
Shows the X, Y, and Z buttons\&. 
.PP
\fBSee also\fP
.RS 4
\fBset_extra_buttons_visible\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int get_extra_buttons_visible ()"
Determines whether or not the X, Y, and Z buttons are visible\&. 
.PP
\fBSee also\fP
.RS 4
\fBset_extra_buttons_visible\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int left_button ()"
Gets the left button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP 
.RE
.PP

.SS "int right_button ()"
Gets the right button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed (But returning flipped) 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP 
.RE
.PP

.SS "void set_a_button_text (const char * text)"
Updates the A button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "void set_b_button_text (const char * text)"
Updates the B button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "void set_c_button_text (const char * text)"
Updates the C button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "void set_extra_buttons_visible (int visible)"
Sets whether or not the X, Y, and Z buttons are visible\&. 
.PP
\fBSee also\fP
.RS 4
\fBget_extra_buttons_visible\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "void set_x_button_text (const char * text)"
Updates the X button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "void set_y_button_text (const char * text)"
Updates the Y button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "void set_z_button_text (const char * text)"
Updates the Z button's text\&. 
.PP
\fBParameters\fP
.RS 4
\fItext\fP The text to display\&. Limit of 16 characters\&.
.RE
.PP
\fBDeprecated\fP
.RS 4
not planned for the Wallaby 
.RE
.PP

.SS "int side_button ()"
Gets the side button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBDeprecated\fP
.RS 4
Not present on the Wallaby 
.RE
.PP

.SS "int side_button_clicked ()"
Gets the Z button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int x_button ()"
Gets the C button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int x_button_clicked ()"
Gets the C button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int y_button ()"
Gets the Y button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int y_button_clicked ()"
Gets the X button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int z_button ()"
Gets the Z button's state (pressed or not pressed\&.) 
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button_clicked\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SS "int z_button_clicked ()"
Gets the Y button's state (pressed or not pressed\&.) 
.PP
\fB\fBThis\fP function blocks until the button is no longer pressed\&.\fP
.RS 4

.RE
.PP
\fBReturns\fP
.RS 4
1 for pressed, 0 for not pressed 
.RE
.PP
\fBSee also\fP
.RS 4
\fBa_button\fP
.RE
.PP
\fBNote\fP
.RS 4
Not yet implemented 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for libkipr from the source code\&.
