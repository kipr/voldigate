<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.1" xml:lang="en-US">
  <compounddef id="thread_8h" kind="file" language="C++">
    <compoundname>thread.h</compoundname>
    <includes refid="export_8h" local="yes">kipr/export/export.h</includes>
    <incdepgraph>
      <node id="2">
        <label>kipr/export/export.h</label>
        <link refid="export_8h"/>
      </node>
      <node id="1">
        <label>/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h</label>
        <link refid="thread_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structmutex" prot="public">mutex</innerclass>
    <innerclass refid="structthread" prot="public">thread</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__thread_1ga8e3564199059191e2e89c86bd95dfaed" prot="public" static="no">
        <type>void(*</type>
        <definition>typedef void(* thread_function) ()</definition>
        <argsstring>)()</argsstring>
        <name>thread_function</name>
        <briefdescription>
<para>thread_function is a wrapper for functions of all return types. </para>
        </briefdescription>
        <detaileddescription>
<para>thread_function is defined so that any function will be accepted by thread_start by automatically casting it to a thread_function so functions with all return types, whether int, float, etc, can be threaded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="50" column="9" bodyfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__thread_1gac9c53fb550d97d6d0ee04f13957f18d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> <ref refid="structmutex" kindref="compound">mutex</ref></type>
        <definition>EXPORT_SYM mutex mutex_create</definition>
        <argsstring>()</argsstring>
        <name>mutex_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a mutex. <simplesect kind="see"><para><ref refid="structmutex" kindref="compound">mutex</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="57" column="18" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="57" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gaa08ae0459f0e31b7c611ca81e285c273" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void mutex_lock</definition>
        <argsstring>(mutex m)</argsstring>
        <name>mutex_lock</name>
        <param>
          <type><ref refid="structmutex" kindref="compound">mutex</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Locks the mutex. This means that only the thread that locked the mutex will run until the mutex is unlocked. <simplesect kind="see"><para><ref refid="group__thread_1gaed6032809721c21f7aae938ee5cc2dff" kindref="member">mutex_unlock</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="65" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="65" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1ga2c3ccecaebe15c1f43def485da2c399d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> int</type>
        <definition>EXPORT_SYM int mutex_trylock</definition>
        <argsstring>(mutex m)</argsstring>
        <name>mutex_trylock</name>
        <param>
          <type><ref refid="structmutex" kindref="compound">mutex</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Try to lock the mutex. <simplesect kind="return"><para>1 on success locking, 0 on failure to lock. </para>
</simplesect>
<simplesect kind="see"><para><ref refid="group__thread_1gaa08ae0459f0e31b7c611ca81e285c273" kindref="member">mutex_lock</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="73" column="16" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="73" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gaed6032809721c21f7aae938ee5cc2dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void mutex_unlock</definition>
        <argsstring>(mutex m)</argsstring>
        <name>mutex_unlock</name>
        <param>
          <type><ref refid="structmutex" kindref="compound">mutex</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unlocks the mutex. This means that other threads (if present) will run again. <simplesect kind="see"><para><ref refid="group__thread_1gaa08ae0459f0e31b7c611ca81e285c273" kindref="member">mutex_lock</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="81" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="81" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1ga62eb2dbc14e329e96bbf5691ec1dfee3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void mutex_destroy</definition>
        <argsstring>(mutex m)</argsstring>
        <name>mutex_destroy</name>
        <param>
          <type><ref refid="structmutex" kindref="compound">mutex</ref></type>
          <declname>m</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the mutex. This is used for cleanup after your program has finished with the mutex. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="88" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="88" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gad2588e21e1b9643b6310da12d251d86a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> <ref refid="structthread" kindref="compound">thread</ref></type>
        <definition>EXPORT_SYM thread thread_create</definition>
        <argsstring>(thread_function func)</argsstring>
        <name>thread_create</name>
        <param>
          <type><ref refid="group__thread_1ga8e3564199059191e2e89c86bd95dfaed" kindref="member">thread_function</ref></type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a thread that will run the given function. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>func</parametername>
</parameternamelist>
<parameterdescription>
<para>The function that the thread will run </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="95" column="19" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="95" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gab1cab7238611cc0e8ecb6cedd8f3b4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void thread_start</definition>
        <argsstring>(thread id)</argsstring>
        <name>thread_start</name>
        <param>
          <type><ref refid="structthread" kindref="compound">thread</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Run the given thread <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to run </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="102" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="102" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gaae2fdbe256ab077842db9d1693ff2d01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void thread_wait</definition>
        <argsstring>(thread id)</argsstring>
        <name>thread_wait</name>
        <param>
          <type><ref refid="structthread" kindref="compound">thread</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Wait until the given thread has finished running. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>id</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread to wait for. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="109" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="109" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__thread_1gaaa9816237851d3dbae5e975be5701131" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref> void</type>
        <definition>EXPORT_SYM void thread_destroy</definition>
        <argsstring>(thread id)</argsstring>
        <name>thread_destroy</name>
        <param>
          <type><ref refid="structthread" kindref="compound">thread</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroy the thread. This is used for cleanup after your program has finished with the thread. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" line="116" column="17" declfile="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h" declline="116" declcolumn="17"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Threading methods. </para>
    </briefdescription>
    <detaileddescription>
<para><simplesect kind="author"><para>Braden McDorman </para>
</simplesect>
<simplesect kind="copyright"><para>KISS Insitute for Practical Robotics </para>
</simplesect>
</para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_KIPR_THREAD_THREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>_KIPR_THREAD_THREAD_H_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="export_8h" kindref="compound">kipr/export/export.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="structmutex" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27" refid="structmutex_1a4a80e8b6f332480afe9e5cd36cddd1a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structmutex_1a4a80e8b6f332480afe9e5cd36cddd1a8" kindref="member">data</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="28"><highlight class="normal">}<sp/><ref refid="structmutex" kindref="compound">mutex</ref>;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="structthread" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39" refid="structthread_1a950fee393b7c274d80cb5dcd97ed90f1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="structthread_1a950fee393b7c274d80cb5dcd97ed90f1" kindref="member">data</ref>;<sp/><sp/></highlight></codeline>
<codeline lineno="40"><highlight class="normal">}<sp/><ref refid="structthread" kindref="compound">thread</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="group__thread_1ga8e3564199059191e2e89c86bd95dfaed" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*<ref refid="group__thread_1ga8e3564199059191e2e89c86bd95dfaed" kindref="member">thread_function</ref>)();</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="group__thread_1gac9c53fb550d97d6d0ee04f13957f18d0" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/><ref refid="structmutex" kindref="compound">mutex</ref><sp/><ref refid="group__thread_1gac9c53fb550d97d6d0ee04f13957f18d0" kindref="member">mutex_create</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="group__thread_1gaa08ae0459f0e31b7c611ca81e285c273" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1gaa08ae0459f0e31b7c611ca81e285c273" kindref="member">mutex_lock</ref>(<ref refid="structmutex" kindref="compound">mutex</ref><sp/>m);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="group__thread_1ga2c3ccecaebe15c1f43def485da2c399d" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__thread_1ga2c3ccecaebe15c1f43def485da2c399d" kindref="member">mutex_trylock</ref>(<ref refid="structmutex" kindref="compound">mutex</ref><sp/>m);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="group__thread_1gaed6032809721c21f7aae938ee5cc2dff" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1gaed6032809721c21f7aae938ee5cc2dff" kindref="member">mutex_unlock</ref>(<ref refid="structmutex" kindref="compound">mutex</ref><sp/>m);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="group__thread_1ga62eb2dbc14e329e96bbf5691ec1dfee3" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1ga62eb2dbc14e329e96bbf5691ec1dfee3" kindref="member">mutex_destroy</ref>(<ref refid="structmutex" kindref="compound">mutex</ref><sp/>m);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="group__thread_1gad2588e21e1b9643b6310da12d251d86a" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/><ref refid="structthread" kindref="compound">thread</ref><sp/><ref refid="group__thread_1gad2588e21e1b9643b6310da12d251d86a" kindref="member">thread_create</ref>(<ref refid="group__thread_1ga8e3564199059191e2e89c86bd95dfaed" kindref="member">thread_function</ref><sp/>func);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="group__thread_1gab1cab7238611cc0e8ecb6cedd8f3b4de" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1gab1cab7238611cc0e8ecb6cedd8f3b4de" kindref="member">thread_start</ref>(<ref refid="structthread" kindref="compound">thread</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="group__thread_1gaae2fdbe256ab077842db9d1693ff2d01" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1gaae2fdbe256ab077842db9d1693ff2d01" kindref="member">thread_wait</ref>(<ref refid="structthread" kindref="compound">thread</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="group__thread_1gaaa9816237851d3dbae5e975be5701131" refkind="member"><highlight class="normal"><ref refid="export_8h_1ad78259114e2822d9b93f376572655819" kindref="member">EXPORT_SYM</ref><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__thread_1gaaa9816237851d3dbae5e975be5701131" kindref="member">thread_destroy</ref>(<ref refid="structthread" kindref="compound">thread</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/module/thread/public/kipr/thread/thread.h"/>
  </compounddef>
</doxygen>
