<?xml version="1.0" ?> 
<top id="1" addr="0x7d5a43e01810" >
    <attributelist id="2" addr="0x7d5a43e01810" >
        <attribute name="outfile" value="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/binding/xml/kipr.xml" id="3" addr="0x7d5a43e15210" />
        <attribute name="name" value="kipr" id="4" addr="0x7d5a43e15210" />
        <attribute name="module" value="kipr" id="5" addr="0x7d5a43e14f10" />
        <attribute name="inputfile" value="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/binding/kipr.i" id="6" addr="0x7d5a43e15210" />
        <attribute name="classes" value="0x7d5a43e15010" id="7" addr="0x7d5a43e15010" />
        <attribute name="infile" value="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/binding/kipr.i" id="8" addr="0x7d5a43e15210" />
        <attribute name="outfile_h" value="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/binding/xml/kipr.h" id="9" addr="0x7d5a43e15210" />
    </attributelist >

    <include id="10" addr="0x7d5a43e12110" >
        <attributelist id="11" addr="0x7d5a43e12110" >
            <attribute name="name" value="/usr/share/swig4.0/swig.swg" id="12" addr="0x7d5a43e15210" />
        </attributelist >

        <include id="13" addr="0x7d5a43e12170" >
            <attributelist id="14" addr="0x7d5a43e12170" >
                <attribute name="name" value="/usr/share/swig4.0/swigwarnings.swg" id="15" addr="0x7d5a43e15210" />
            </attributelist >

            <include id="16" addr="0x7d5a43e12250" >
                <attributelist id="17" addr="0x7d5a43e12250" >
                    <attribute name="name" value="/usr/share/swig4.0/swigwarn.swg" id="18" addr="0x7d5a43e15210" />
                </attributelist >
             
            </include >
        </include >
        <include id="19" addr="0x7d5a43e12370" >
            <attributelist id="20" addr="0x7d5a43e12370" >
                <attribute name="name" value="/usr/share/swig4.0/swigfragments.swg" id="21" addr="0x7d5a43e15210" />
            </attributelist >

            <fragment id="22" addr="0x7d5a43e124b0" >
                <attributelist id="23" addr="0x7d5a43e124b0" >
                    <attribute name="value" value="&lt;float.h>" id="24" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;float.h>&#10;" id="25" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="26" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="27" addr="0x7d5a43e12650" >
                <attributelist id="28" addr="0x7d5a43e12650" >
                    <attribute name="value" value="&lt;limits.h>" id="29" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;limits.h>&#10;#if !defined(SWIG_NO_LLONG_MAX)&#10;# if !defined(LLONG_MAX) &amp;&amp; defined(__GNUC__) &amp;&amp; defined (__LONG_LONG_MAX__)&#10;#   define LLONG_MAX __LONG_LONG_MAX__&#10;#   define LLONG_MIN (-LLONG_MAX - 1LL)&#10;#   define ULLONG_MAX (LLONG_MAX * 2ULL + 1ULL)&#10;# endif&#10;#endif&#10;" id="30" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="31" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="32" addr="0x7d5a43e12790" >
                <attributelist id="33" addr="0x7d5a43e12790" >
                    <attribute name="value" value="&lt;math.h>" id="34" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;math.h>&#10;" id="35" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="36" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="37" addr="0x7d5a43e128b0" >
                <attributelist id="38" addr="0x7d5a43e128b0" >
                    <attribute name="value" value="&lt;stddef.h>" id="39" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;stddef.h>&#10;" id="40" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="41" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="42" addr="0x7d5a43e129d0" >
                <attributelist id="43" addr="0x7d5a43e129d0" >
                    <attribute name="value" value="&lt;stdio.h>" id="44" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;stdio.h>&#10;#if (defined(_MSC_VER) &amp;&amp; (_MSC_VER &lt; 1900)) || defined(__BORLANDC__) || defined(_WATCOM)&#10;# ifndef snprintf&#10;#  define snprintf _snprintf&#10;# endif&#10;#endif&#10;" id="45" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="46" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="47" addr="0x7d5a43e12af0" >
                <attributelist id="48" addr="0x7d5a43e12af0" >
                    <attribute name="value" value="&lt;stdlib.h>" id="49" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;stdlib.h>&#10;#ifdef _MSC_VER&#10;# ifndef strtoull&#10;#  define strtoull _strtoui64&#10;# endif&#10;# ifndef strtoll&#10;#  define strtoll _strtoi64&#10;# endif&#10;#endif&#10;" id="50" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="51" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="52" addr="0x7d5a43e12c10" >
                <attributelist id="53" addr="0x7d5a43e12c10" >
                    <attribute name="value" value="&lt;wchar.h>" id="54" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;wchar.h>&#10;#include &lt;limits.h>&#10;#ifndef WCHAR_MIN&#10;#  define WCHAR_MIN 0&#10;#endif&#10;#ifndef WCHAR_MAX&#10;#  define WCHAR_MAX 65535&#10;#endif&#10;" id="55" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="56" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="57" addr="0x7d5a43e12d30" >
                <attributelist id="58" addr="0x7d5a43e12d30" >
                    <attribute name="value" value="&lt;algorithm>" id="59" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;algorithm>&#10;" id="60" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="61" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="62" addr="0x7d5a43e12e50" >
                <attributelist id="63" addr="0x7d5a43e12e50" >
                    <attribute name="value" value="&lt;stdexcept>" id="64" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;stdexcept>&#10;" id="65" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="66" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="67" addr="0x7d5a43e12f70" >
                <attributelist id="68" addr="0x7d5a43e12f70" >
                    <attribute name="value" value="&lt;string>" id="69" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;string>&#10;" id="70" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="71" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
            <fragment id="72" addr="0x7d5a43e13090" >
                <attributelist id="73" addr="0x7d5a43e13090" >
                    <attribute name="value" value="&lt;memory>" id="74" addr="0x7d5a43e15210" />
                    <attribute name="code" value="&#10;#include &lt;memory>&#10;" id="75" addr="0x7d5a43e15210" />
                    <attribute name="section" value="header" id="76" addr="0x7d5a43e15210" />
                </attributelist >
             
            </fragment >
        </include >
        <typemap id="77" addr="0x7d5a43e132b0" >
            <attributelist id="78" addr="0x7d5a43e132b0" >
                <attribute name="code" value="free($1);" id="79" addr="0x7d5a43e15210" />
                <attribute name="method" value="newfree" id="80" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="81" addr="0x7d5a43e13190" >
                <attributelist id="82" addr="0x7d5a43e13190" >
                    <parmlist id="83" addr="0x7d5a43e131d0" >
                        <parm id="84">
                            <attributelist id="85" addr="0x7d5a43e131d0" >
                                <attribute name="type" value="p.char" id="86" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="87" addr="0x7d5a43e134b0" >
            <attributelist id="88" addr="0x7d5a43e134b0" >
                <attribute name="code" value="{&#10;  free($1);&#10;  if ($input) {&#10;     $1 = ($1_type) malloc(strlen((const char *)$input)+1);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="89" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="90" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="91" addr="0x7d5a43e133f0" >
                <attributelist id="92" addr="0x7d5a43e133f0" >
                    <parmlist id="93" addr="0x7d5a43e13430" >
                        <parm id="94">
                            <attributelist id="95" addr="0x7d5a43e13430" >
                                <attribute name="type" value="p.char" id="96" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="97" addr="0x7d5a43e13710" >
            <attributelist id="98" addr="0x7d5a43e13710" >
                <kwargs id="99" addr="0x7d5a43e13550" >
                    <attributelist id="100" addr="0x7d5a43e13550" >
                        <attribute name="name" value="warning" id="101" addr="0x7d5a43e15210" />
                        <attribute name="value" value="451:Setting a const char * variable may leak memory." id="102" addr="0x7d5a43e15210" />
                    </attributelist >
                    <kwargssitem id="103" addr="0x7d5a43e13570" >
                        <attributelist id="104" addr="0x7d5a43e13570" >
                        </attributelist >
                    </kwargssitem >
                    <kwargssitem id="105" addr="0x7d5a43e13530" >
                        <attributelist id="106" addr="0x7d5a43e13530" >
                        </attributelist >
                    </kwargssitem >
                </kwargs >
                <attribute name="code" value="{&#10;  if ($input) {&#10;     $1 = ($1_type) malloc(strlen((const char *)$input)+1);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="107" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="108" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="109" addr="0x7d5a43e13650" >
                <attributelist id="110" addr="0x7d5a43e13650" >
                    <parmlist id="111" addr="0x7d5a43e13690" >
                        <parm id="112">
                            <attributelist id="113" addr="0x7d5a43e13690" >
                                <attribute name="type" value="p.q(const).char" id="114" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="115" addr="0x7d5a43e138f0" >
            <attributelist id="116" addr="0x7d5a43e138f0" >
                <attribute name="code" value="{&#10;  free($1);&#10;  if ($input) {&#10;     $1 = ($1_type) malloc(strlen((const char *)$input)+1);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="117" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="118" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="119" addr="0x7d5a43e13830" >
                <attributelist id="120" addr="0x7d5a43e13830" >
                    <parmlist id="121" addr="0x7d5a43e13870" >
                        <parm id="122">
                            <attributelist id="123" addr="0x7d5a43e13870" >
                                <attribute name="type" value="p.char" id="124" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="125" addr="0x7d5a43e13b50" >
            <attributelist id="126" addr="0x7d5a43e13b50" >
                <kwargs id="127" addr="0x7d5a43e13990" >
                    <attributelist id="128" addr="0x7d5a43e13990" >
                        <attribute name="name" value="warning" id="129" addr="0x7d5a43e15210" />
                        <attribute name="value" value="451:Setting a const char * variable may leak memory." id="130" addr="0x7d5a43e15210" />
                    </attributelist >
                    <kwargssitem id="131" addr="0x7d5a43e139b0" >
                        <attributelist id="132" addr="0x7d5a43e139b0" >
                        </attributelist >
                    </kwargssitem >
                    <kwargssitem id="133" addr="0x7d5a43e13970" >
                        <attributelist id="134" addr="0x7d5a43e13970" >
                        </attributelist >
                    </kwargssitem >
                </kwargs >
                <attribute name="code" value="{&#10;  if ($input) {&#10;     $1 = ($1_type) malloc(strlen((const char *)$input)+1);&#10;     strcpy((char *)$1, (const char *)$input);&#10;  } else {&#10;     $1 = 0;&#10;  }&#10;}" id="135" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="136" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="137" addr="0x7d5a43e13a90" >
                <attributelist id="138" addr="0x7d5a43e13a90" >
                    <parmlist id="139" addr="0x7d5a43e13ad0" >
                        <parm id="140">
                            <attributelist id="141" addr="0x7d5a43e13ad0" >
                                <attribute name="type" value="p.q(const).char" id="142" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="143" addr="0x7d5a43e13d90" >
            <attributelist id="144" addr="0x7d5a43e13d90" >
                <attribute name="code" value="{&#10;  if($input) {&#10;    strncpy((char*)$1, (const char *)$input, $1_dim0-1);&#10;    $1[$1_dim0-1] = 0;&#10;  } else {&#10;    $1[0] = 0;&#10;  }&#10;}" id="145" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="146" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="147" addr="0x7d5a43e13cd0" >
                <attributelist id="148" addr="0x7d5a43e13cd0" >
                    <parmlist id="149" addr="0x7d5a43e13d10" >
                        <parm id="150">
                            <attributelist id="151" addr="0x7d5a43e13d10" >
                                <attribute name="type" value="a(ANY).char" id="152" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="153" addr="0x7d5a43e13fb0" >
            <attributelist id="154" addr="0x7d5a43e13fb0" >
                <attribute name="code" value="{&#10;  if($input) {&#10;    strncpy((char*)$1, (const char *)$input, $1_dim0-1);&#10;    $1[$1_dim0-1] = 0;&#10;  } else {&#10;    $1[0] = 0;&#10;  }&#10;}" id="155" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="156" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="157" addr="0x7d5a43e13ef0" >
                <attributelist id="158" addr="0x7d5a43e13ef0" >
                    <parmlist id="159" addr="0x7d5a43e13f30" >
                        <parm id="160">
                            <attributelist id="161" addr="0x7d5a43e13f30" >
                                <attribute name="type" value="a(ANY).char" id="162" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="163" addr="0x7d5a43e14190" >
            <attributelist id="164" addr="0x7d5a43e14190" >
                <attribute name="code" value="{&#10;  if ($input) strcpy((char *)$1, (const char *)$input);&#10;  else $1[0] = 0;&#10;}" id="165" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="166" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="167" addr="0x7d5a43e140d0" >
                <attributelist id="168" addr="0x7d5a43e140d0" >
                    <parmlist id="169" addr="0x7d5a43e14110" >
                        <parm id="170">
                            <attributelist id="171" addr="0x7d5a43e14110" >
                                <attribute name="type" value="a().char" id="172" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="173" addr="0x7d5a43e14370" >
            <attributelist id="174" addr="0x7d5a43e14370" >
                <attribute name="code" value="{&#10;  if ($input) strcpy((char *)$1, (const char *)$input);&#10;  else $1[0] = 0;&#10;}" id="175" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="176" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="177" addr="0x7d5a43e142b0" >
                <attributelist id="178" addr="0x7d5a43e142b0" >
                    <parmlist id="179" addr="0x7d5a43e142f0" >
                        <parm id="180">
                            <attributelist id="181" addr="0x7d5a43e142f0" >
                                <attribute name="type" value="a().char" id="182" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="183" addr="0x7d5a43e14590" >
            <attributelist id="184" addr="0x7d5a43e14590" >
                <attribute name="code" value="{&#10;  size_t ii;&#10;  $1_basetype *b = ($1_basetype *) $1;&#10;  for (ii = 0; ii &lt; (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);&#10;}" id="185" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="186" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="187" addr="0x7d5a43e144d0" >
                <attributelist id="188" addr="0x7d5a43e144d0" >
                    <parmlist id="189" addr="0x7d5a43e14510" >
                        <parm id="190">
                            <attributelist id="191" addr="0x7d5a43e14510" >
                                <attribute name="type" value="a(ANY).SWIGTYPE" id="192" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="193" addr="0x7d5a43e147b0" >
            <attributelist id="194" addr="0x7d5a43e147b0" >
                <attribute name="code" value="{&#10;  size_t ii;&#10;  $1_basetype *b = ($1_basetype *) $1;&#10;  for (ii = 0; ii &lt; (size_t)$1_size; ii++) b[ii] = *(($1_basetype *) $input + ii);&#10;}" id="195" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="196" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="197" addr="0x7d5a43e146f0" >
                <attributelist id="198" addr="0x7d5a43e146f0" >
                    <parmlist id="199" addr="0x7d5a43e14730" >
                        <parm id="200">
                            <attributelist id="201" addr="0x7d5a43e14730" >
                                <attribute name="type" value="a(ANY).SWIGTYPE" id="202" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="203" addr="0x7d5a43e14a10" >
            <attributelist id="204" addr="0x7d5a43e14a10" >
                <attribute name="code" value="{&#10;  $basetype (*inp)[$1_dim1] = ($basetype (*)[$1_dim1])($input);&#10;  $basetype (*dest)[$1_dim1] = ($basetype (*)[$1_dim1])($1);&#10;  size_t ii = 0;&#10;  for (; ii &lt; $1_dim0; ++ii) {&#10;    $basetype *ip = inp[ii];&#10;    $basetype *dp = dest[ii];&#10;    size_t jj = 0;&#10;    for (; jj &lt; $1_dim1; ++jj) dp[jj] = ip[jj];&#10;  }&#10;}" id="205" addr="0x7d5a43e15210" />
                <attribute name="method" value="memberin" id="206" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="207" addr="0x7d5a43e148f0" >
                <attributelist id="208" addr="0x7d5a43e148f0" >
                    <parmlist id="209" addr="0x7d5a43e14990" >
                        <parm id="210">
                            <attributelist id="211" addr="0x7d5a43e14990" >
                                <attribute name="type" value="a(ANY).a(ANY).SWIGTYPE" id="212" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <typemap id="213" addr="0x7d5a43e14c70" >
            <attributelist id="214" addr="0x7d5a43e14c70" >
                <attribute name="code" value="{&#10;  $basetype (*inp)[$1_dim1] = ($basetype (*)[$1_dim1])($input);&#10;  $basetype (*dest)[$1_dim1] = ($basetype (*)[$1_dim1])($1);&#10;  size_t ii = 0;&#10;  for (; ii &lt; $1_dim0; ++ii) {&#10;    $basetype *ip = inp[ii];&#10;    $basetype *dp = dest[ii];&#10;    size_t jj = 0;&#10;    for (; jj &lt; $1_dim1; ++jj) dp[jj] = ip[jj];&#10;  }&#10;}" id="215" addr="0x7d5a43e15210" />
                <attribute name="method" value="globalin" id="216" addr="0x7d5a43e15210" />
            </attributelist >

            <typemapitem id="217" addr="0x7d5a43e14b50" >
                <attributelist id="218" addr="0x7d5a43e14b50" >
                    <parmlist id="219" addr="0x7d5a43e14bf0" >
                        <parm id="220">
                            <attributelist id="221" addr="0x7d5a43e14bf0" >
                                <attribute name="type" value="a(ANY).a(ANY).SWIGTYPE" id="222" addr="0x7d5a43e15210" />
                            </attributelist >
                        </parm >
                    </parmlist >
                </attributelist >
             
            </typemapitem >
        </typemap >
        <insert id="223" addr="0x7d5a43e14d50" >
            <attributelist id="224" addr="0x7d5a43e14d50" >
                <attribute name="code" value="/* -----------------------------------------------------------------------------&#10; *  This section contains generic SWIG labels for method/variable&#10; *  declarations/attributes, and other compiler dependent labels.&#10; * ----------------------------------------------------------------------------- */&#10;&#10;/* template workaround for compilers that cannot correctly implement the C++ standard */&#10;#ifndef SWIGTEMPLATEDISAMBIGUATOR&#10;# if defined(__SUNPRO_CC) &amp;&amp; (__SUNPRO_CC &lt;= 0x560)&#10;#  define SWIGTEMPLATEDISAMBIGUATOR template&#10;# elif defined(__HP_aCC)&#10;/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */&#10;/* If we find a maximum version that requires this, the test would be __HP_aCC &lt;= 35500 for A.03.55 */&#10;#  define SWIGTEMPLATEDISAMBIGUATOR template&#10;# else&#10;#  define SWIGTEMPLATEDISAMBIGUATOR&#10;# endif&#10;#endif&#10;&#10;/* inline attribute */&#10;#ifndef SWIGINLINE&#10;# if defined(__cplusplus) || (defined(__GNUC__) &amp;&amp; !defined(__STRICT_ANSI__))&#10;#   define SWIGINLINE inline&#10;# else&#10;#   define SWIGINLINE&#10;# endif&#10;#endif&#10;&#10;/* attribute recognised by some compilers to avoid 'unused' warnings */&#10;#ifndef SWIGUNUSED&#10;# if defined(__GNUC__)&#10;#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 4))&#10;#     define SWIGUNUSED __attribute__ ((__unused__))&#10;#   else&#10;#     define SWIGUNUSED&#10;#   endif&#10;# elif defined(__ICC)&#10;#   define SWIGUNUSED __attribute__ ((__unused__))&#10;# else&#10;#   define SWIGUNUSED&#10;# endif&#10;#endif&#10;&#10;#ifndef SWIG_MSC_UNSUPPRESS_4505&#10;# if defined(_MSC_VER)&#10;#   pragma warning(disable : 4505) /* unreferenced local function has been removed */&#10;# endif&#10;#endif&#10;&#10;#ifndef SWIGUNUSEDPARM&#10;# ifdef __cplusplus&#10;#   define SWIGUNUSEDPARM(p)&#10;# else&#10;#   define SWIGUNUSEDPARM(p) p SWIGUNUSED&#10;# endif&#10;#endif&#10;&#10;/* internal SWIG method */&#10;#ifndef SWIGINTERN&#10;# define SWIGINTERN static SWIGUNUSED&#10;#endif&#10;&#10;/* internal inline SWIG method */&#10;#ifndef SWIGINTERNINLINE&#10;# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE&#10;#endif&#10;&#10;/* exporting methods */&#10;#if defined(__GNUC__)&#10;#  if (__GNUC__ >= 4) || (__GNUC__ == 3 &amp;&amp; __GNUC_MINOR__ >= 4)&#10;#    ifndef GCC_HASCLASSVISIBILITY&#10;#      define GCC_HASCLASSVISIBILITY&#10;#    endif&#10;#  endif&#10;#endif&#10;&#10;#ifndef SWIGEXPORT&#10;# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)&#10;#   if defined(STATIC_LINKED)&#10;#     define SWIGEXPORT&#10;#   else&#10;#     define SWIGEXPORT __declspec(dllexport)&#10;#   endif&#10;# else&#10;#   if defined(__GNUC__) &amp;&amp; defined(GCC_HASCLASSVISIBILITY)&#10;#     define SWIGEXPORT __attribute__ ((visibility(&quot;default&quot;)))&#10;#   else&#10;#     define SWIGEXPORT&#10;#   endif&#10;# endif&#10;#endif&#10;&#10;/* calling conventions for Windows */&#10;#ifndef SWIGSTDCALL&#10;# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)&#10;#   define SWIGSTDCALL __stdcall&#10;# else&#10;#   define SWIGSTDCALL&#10;# endif&#10;#endif&#10;&#10;/* Deal with Microsoft's attempt at deprecating C standard runtime functions */&#10;#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) &amp;&amp; defined(_MSC_VER) &amp;&amp; !defined(_CRT_SECURE_NO_DEPRECATE)&#10;# define _CRT_SECURE_NO_DEPRECATE&#10;#endif&#10;&#10;/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */&#10;#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) &amp;&amp; defined(_MSC_VER) &amp;&amp; !defined(_SCL_SECURE_NO_DEPRECATE)&#10;# define _SCL_SECURE_NO_DEPRECATE&#10;#endif&#10;&#10;/* Deal with Apple's deprecated 'AssertMacros.h' from Carbon-framework */&#10;#if defined(__APPLE__) &amp;&amp; !defined(__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES)&#10;# define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0&#10;#endif&#10;&#10;/* Intel's compiler complains if a variable which was never initialised is&#10; * cast to void, which is a common idiom which we use to indicate that we&#10; * are aware a variable isn't used.  So we just silence that warning.&#10; * See: https://github.com/swig/swig/issues/192 for more discussion.&#10; */&#10;#ifdef __INTEL_COMPILER&#10;# pragma warning disable 592&#10;#endif&#10;" id="225" addr="0x7d5a43e15210" />
                <attribute name="section" value="runtime" id="226" addr="0x7d5a43e15210" />
            </attributelist >
         
        </insert >
    </include >
    <include id="227" addr="0x7d5a43e14df0" >
        <attributelist id="228" addr="0x7d5a43e14df0" >
            <attribute name="name" value="/home/erin/Desktop/qt6Upgrade/voldigate/dependencies/libwallaby/binding/kipr.i" id="229" addr="0x7d5a43e15210" />
            <attribute name="module" value="" id="230" addr="0x7d5a43e14f70" />
            <attribute name="options" value="0x7d5a43e14e90" id="231" addr="0x7d5a43e14e90" />
        </attributelist >

        <module id="232" addr="0x7d5a43e14f10" >
            <attributelist id="233" addr="0x7d5a43e14f10" >
                <attribute name="name" value="kipr" id="234" addr="0x7d5a43e15210" />
            </attributelist >
         
        </module >
        <insert id="235" addr="0x7d5a43e14fb0" >
            <attributelist id="236" addr="0x7d5a43e14fb0" >
                <attribute name="code" value="&#10;#include &quot;kipr/config.h&quot;  // Make sure this include path is correct for your setup.&#10;" id="237" addr="0x7d5a43e15210" />
            </attributelist >
         
        </insert >
    </include >
</top >
