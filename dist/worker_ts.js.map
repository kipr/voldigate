{"version":3,"file":"worker_ts.js","sources":["webpack:///./RegisterState.ts","webpack:///./SharedRegisters.ts","webpack:///./SharedRingBufferU32.ts","webpack:///./SharedRingBufferUtf32.ts","webpack:///./python/index.ts","webpack:///./python/registersDevice.ts","webpack:///./require.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./worker.ts"],"sourcesContent":["export default {\n    WALLABY_SPI_VERSION: 4,\n    /* READ Only Registers ----------------------- */\n    REG_R_START: 0,\n    // SHAREDARRAYBUFFER PADDING (1 BYTE)\n    REG_R_VERSION_H: 1,\n    REG_R_VERSION_L: 2,\n    /* READ/Write Registers ----------------------- */\n    REG_RW_DIG_IN_H: 3,\n    REG_RW_DIG_IN_L: 4,\n    REG_RW_DIG_OUT_H: 5,\n    REG_RW_DIG_OUT_L: 6,\n    REG_RW_DIG_PE_H: 7,\n    REG_RW_DIG_PE_L: 8,\n    REG_RW_DIG_OE_H: 9,\n    REG_RW_DIG_OE_L: 10,\n    REG_RW_ADC_0_H: 11,\n    REG_RW_ADC_0_L: 12,\n    REG_RW_ADC_1_H: 13,\n    REG_RW_ADC_1_L: 14,\n    REG_RW_ADC_2_H: 15,\n    REG_RW_ADC_2_L: 16,\n    REG_RW_ADC_3_H: 17,\n    REG_RW_ADC_3_L: 18,\n    REG_RW_ADC_4_H: 19,\n    REG_RW_ADC_4_L: 20,\n    REG_RW_ADC_5_H: 21,\n    REG_RW_ADC_5_L: 22,\n    REG_RW_ADC_PE: 23,\n    // SHAREDARRAYBUFFER PADDING (1 BYTE)\n    REG_RW_MAG_X_H: 24,\n    REG_RW_MAG_X_L: 25,\n    REG_RW_MAG_Y_H: 26,\n    REG_RW_MAG_Y_L: 27,\n    REG_RW_MAG_Z_H: 28,\n    REG_RW_MAG_Z_L: 29,\n    REG_RW_ACCEL_X_H: 30,\n    REG_RW_ACCEL_X_L: 31,\n    REG_RW_ACCEL_Y_H: 32,\n    REG_RW_ACCEL_Y_L: 33,\n    REG_RW_ACCEL_Z_H: 34,\n    REG_RW_ACCEL_Z_L: 35,\n    REG_RW_GYRO_X_H: 36,\n    REG_RW_GYRO_X_L: 37,\n    REG_RW_GYRO_Y_H: 38,\n    REG_RW_GYRO_Y_L: 39,\n    REG_RW_GYRO_Z_H: 40,\n    REG_RW_GYRO_Z_L: 41,\n    // Motor 0 position\n    REG_RW_MOT_0_B3: 42,\n    REG_RW_MOT_0_B2: 43,\n    REG_RW_MOT_0_B1: 44,\n    REG_RW_MOT_0_B0: 45,\n    // Motor 1 position\n    REG_RW_MOT_1_B3: 46,\n    REG_Rw_MOT_1_B2: 47,\n    REG_Rw_MOT_1_B1: 48,\n    REG_RW_MOT_1_B0: 49,\n    // Motor 2 position\n    REG_RW_MOT_2_B3: 50,\n    REG_RW_MOT_2_B2: 51,\n    REG_RW_MOT_2_B1: 52,\n    REG_RW_MOT_2_B0: 53,\n    // Motor 3 position\n    REG_RW_MOT_3_B3: 54,\n    REG_RW_MOT_3_B2: 55,\n    REG_RW_MOT_3_B1: 56,\n    REG_RW_MOT_3_B0: 57,\n    REG_RW_MOT_MODES: 58,\n    REG_RW_MOT_DIRS: 59,\n    REG_RW_MOT_DONE: 60,\n    REG_RW_MOT_SRV_ALLSTOP: 61,\n    // 16 bit signed speed goals\n    REG_RW_MOT_0_SP_H: 62,\n    REG_RW_MOT_0_SP_L: 63,\n    REG_RW_MOT_1_SP_H: 64,\n    REG_RW_MOT_1_SP_L: 65,\n    REG_RW_MOT_2_SP_H: 66,\n    REG_RW_MOT_2_SP_L: 67,\n    REG_RW_MOT_3_SP_H: 68,\n    REG_RW_MOT_3_SP_L: 69,\n    // 16 bit unsigned pwms, from the user or PID controller\n    REG_RW_MOT_0_PWM_H: 70,\n    REG_RW_MOT_0_PWM_L: 71,\n    REG_RW_MOT_1_PWM_H: 72,\n    REG_RW_MOT_1_PWM_L: 73,\n    REG_RW_MOT_2_PWM_H: 74,\n    REG_RW_MOT_2_PWM_L: 75,\n    REG_RW_MOT_3_PWM_H: 76,\n    REG_RW_MOT_3_PWM_L: 77,\n    // 16 bit unsigned servo goals\n    // microsecond servo pulse, where 1500 is neutral\n    // +/- about 10 per degree from neutral\n    REG_RW_SERVO_0_H: 78,\n    REG_RW_SERVO_0_L: 79,\n    REG_RW_SERVO_1_H: 80,\n    REG_RW_SERVO_1_L: 81,\n    REG_RW_SERVO_2_H: 82,\n    REG_RW_SERVO_2_L: 83,\n    REG_RW_SERVO_3_H: 84,\n    REG_RW_SERVO_3_L: 85,\n    // 12 bit unsigned int adc result\n    REG_RW_BATT_H: 86,\n    REG_RW_BATT_L: 87,\n    // msb is \"extra show\", then a non used bit\n    // then 6 virtual button bits\n    // E x 5 4 3 2 1 0\n    REG_RW_BUTTONS: 88,\n    REG_READABLE_COUNT: 89,\n    // SHAREDARRAYBUFFER PADDING (1 BYTE)\n    // WRITE ONLY Registers---------------------------------------------------------\n    REG_W_PID_0_P_H: 89,\n    REG_W_PID_0_P_L: 90,\n    REG_W_PID_0_PD_H: 91,\n    REG_W_PID_0_PD_L: 92,\n    REG_W_PID_0_I_H: 93,\n    REG_W_PID_0_I_L: 94,\n    REG_W_PID_0_ID_H: 95,\n    REG_W_PID_0_ID_L: 96,\n    REG_W_PID_0_D_H: 97,\n    REG_W_PID_0_D_L: 98,\n    REG_W_PID_0_DD_H: 99,\n    REG_W_PID_0_DD_L: 100,\n    REG_W_PID_1_P_H: 101,\n    REG_W_PID_1_P_L: 102,\n    REG_W_PID_1_PD_H: 103,\n    REG_W_PID_1_PD_L: 104,\n    REG_W_PID_1_I_H: 105,\n    REG_W_PID_1_I_L: 106,\n    REG_W_PID_1_ID_H: 107,\n    REG_W_PID_1_ID_L: 108,\n    REG_W_PID_1_D_H: 119,\n    REG_W_PID_1_D_L: 110,\n    REG_W_PID_1_DD_H: 111,\n    REG_W_PID_1_DD_L: 112,\n    REG_W_PID_2_P_H: 113,\n    REG_W_PID_2_P_L: 114,\n    REG_W_PID_2_PD_H: 115,\n    REG_W_PID_2_PD_L: 116,\n    REG_W_PID_2_I_H: 117,\n    REG_W_PID_2_I_L: 118,\n    REG_W_PID_2_ID_H: 119,\n    REG_W_PID_2_ID_L: 120,\n    REG_W_PID_2_D_H: 121,\n    REG_W_PID_2_D_L: 122,\n    REG_W_PID_2_DD_H: 123,\n    REG_W_PID_2_DD_L: 124,\n    REG_W_PID_3_P_H: 125,\n    REG_W_PID_3_P_L: 126,\n    REG_W_PID_3_PD_H: 127,\n    REG_W_PID_3_PD_L: 128,\n    REG_W_PID_3_I_H: 129,\n    REG_W_PID_3_I_L: 130,\n    REG_W_PID_3_ID_H: 131,\n    REG_W_PID_3_ID_L: 132,\n    REG_W_PID_3_D_H: 133,\n    REG_W_PID_3_D_L: 134,\n    REG_W_PID_3_DD_H: 135,\n    REG_W_PID_3_DD_L: 136,\n    // Motor 0 position goal\n    REG_W_MOT_0_GOAL_B3: 137,\n    REG_W_MOT_0_GOAL_B2: 138,\n    REG_W_MOT_0_GOAL_B1: 139,\n    REG_W_MOT_0_GOAL_B0: 140,\n    // Motor 1 position goal\n    REG_W_MOT_1_GOAL_B3: 141,\n    REG_w_MOT_1_GOAL_B2: 142,\n    REG_w_MOT_1_GOAL_B1: 143,\n    REG_W_MOT_1_GOAL_B0: 144,\n    // Motor 2 position goal\n    REG_W_MOT_2_GOAL_B3: 145,\n    REG_W_MOT_2_GOAL_B2: 146,\n    REG_W_MOT_2_GOAL_B1: 147,\n    REG_W_MOT_2_GOAL_B0: 148,\n    // Motor 3 position goal\n    REG_W_MOT_3_GOAL_B3: 149,\n    REG_W_MOT_3_GOAL_B2: 150,\n    REG_W_MOT_3_GOAL_B1: 151,\n    REG_W_MOT_3_GOAL_B0: 152,\n    REG_ALL_COUNT: 153\n};\nexport const MotorControlMode = {\n    Inactive: 0,\n    Speed: 1,\n    Position: 2,\n    SpeedPosition: 3,\n};\n","import Registers from \"./RegisterState\";\n/**\n * Represents the register data that is shared between the main thread and the worker thread.\n * The data is stored in a SharedArrayBuffer and accessed using typed arrays and the appropriate\n * atomic operations from Atomics.\n *\n * The SharedArrayBuffer indexes and register address are not the same because the multi-byte\n * array views must be aligned properly. For example, 4 byte values must start at address 0, 4, 8, etc.\n * So there are some padding bytes throughout the register space to ensure alignment.\n *\n * Additionally, the typed arrays use the platform's endianness (typically little-endian) while\n * the multi-byte registers are stored in big-endian order. As a result, the indexes are also different\n * within a multi-byte value, so the individual bytes in multi-byte values shouldn't be accessed separately.\n */\nexport default class SharedRegisters {\n    constructor(registerSharedArrayBuffer) {\n        this.getRegisterValue8b = (registerAddress, signed = false) => {\n            const array = signed ? this.registerArrayView8b_ : this.registerArrayViewU8b_;\n            return Atomics.load(array, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress));\n        };\n        this.getRegisterValue16b = (registerAddress, signed = false) => {\n            const array = signed ? this.registerArrayView16b_ : this.registerArrayViewU16b_;\n            return Atomics.load(array, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress) / 2);\n        };\n        this.getRegisterValue32b = (registerAddress, signed = false) => {\n            const array = signed ? this.registerArrayView32b_ : this.registerArrayViewU32b_;\n            return Atomics.load(array, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress) / 4);\n        };\n        // Add 3 bytes to account for padding. See RegisterState for which bytes are padded\n        this.registerSharedArrayBuffer_ = registerSharedArrayBuffer !== null && registerSharedArrayBuffer !== void 0 ? registerSharedArrayBuffer : new SharedArrayBuffer(Registers.REG_ALL_COUNT + 3);\n        this.registerArrayViewU8b_ = new Uint8Array(this.registerSharedArrayBuffer_);\n        this.registerArrayView8b_ = new Int8Array(this.registerSharedArrayBuffer_);\n        this.registerArrayViewU16b_ = new Uint16Array(this.registerSharedArrayBuffer_);\n        this.registerArrayView16b_ = new Int16Array(this.registerSharedArrayBuffer_);\n        this.registerArrayViewU32b_ = new Uint32Array(this.registerSharedArrayBuffer_);\n        this.registerArrayView32b_ = new Int32Array(this.registerSharedArrayBuffer_);\n    }\n    getSharedArrayBuffer() {\n        return this.registerSharedArrayBuffer_;\n    }\n    clone() {\n        const newRegisterSharedArrayBuffer = new SharedArrayBuffer(this.registerSharedArrayBuffer_.byteLength);\n        new Uint8Array(newRegisterSharedArrayBuffer).set(this.registerArrayViewU8b_);\n        return new SharedRegisters(newRegisterSharedArrayBuffer);\n    }\n    setRegister8b(registerAddress, value) {\n        Atomics.store(this.registerArrayView8b_, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress), value);\n    }\n    setRegister16b(registerAddress, value) {\n        Atomics.store(this.registerArrayView16b_, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress) / 2, value);\n    }\n    setRegister32b(registerAddress, value) {\n        Atomics.store(this.registerArrayView32b_, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress) / 4, value);\n    }\n    incrementRegister32b(registerAddress, value) {\n        Atomics.add(this.registerArrayView32b_, SharedRegisters.getBufferIndexForRegisterAddress(registerAddress) / 4, value);\n    }\n}\n/**\n * Get the index in the SharedArrayBuffer that corresponds to the given address.\n * Accounts for the padding bytes.\n * @param address The address of the register.\n * @returns The index in the SharedArrayBuffer that corresponds to the given address.\n */\nSharedRegisters.getBufferIndexForRegisterAddress = (address) => {\n    if (address <= Registers.REG_R_START)\n        return address;\n    if (address <= Registers.REG_RW_ADC_PE)\n        return address + 1;\n    if (address <= Registers.REG_RW_BUTTONS)\n        return address + 2;\n    return address + 3;\n};\n","class SharedRingBufferU32 {\n    constructor(sab) {\n        if (sab.byteLength <= SharedRingBufferU32.HEADER_SIZE + 4) {\n            throw new Error('SharedRingBufferU32: SharedArrayBuffer is too small');\n        }\n        if (sab.byteLength % 4 !== 0) {\n            throw new Error('SharedRingBufferU32: SharedArrayBuffer byteLength is not a multiple of 4');\n        }\n        this.sab_ = sab;\n        this.u32_ = new Uint32Array(sab);\n    }\n    get sharedArrayBuffer() { return this.sab_; }\n    get maxLength() {\n        return this.u32_.length - SharedRingBufferU32.HEADER_SIZE / 4;\n    }\n    static create(maxLength) {\n        const sab = new SharedArrayBuffer(SharedRingBufferU32.HEADER_SIZE + maxLength * 4);\n        const u32 = new Uint32Array(sab);\n        u32[SharedRingBufferU32.BEGIN_INDEX] = 0;\n        u32[SharedRingBufferU32.END_INDEX] = 0;\n        return new SharedRingBufferU32(sab);\n    }\n    get begin_() {\n        return Atomics.load(this.u32_, SharedRingBufferU32.BEGIN_INDEX);\n    }\n    set begin_(begin) {\n        Atomics.store(this.u32_, SharedRingBufferU32.BEGIN_INDEX, begin % this.maxLength);\n    }\n    get end_() {\n        return Atomics.load(this.u32_, SharedRingBufferU32.END_INDEX);\n    }\n    set end_(end) {\n        Atomics.store(this.u32_, SharedRingBufferU32.END_INDEX, end % this.maxLength);\n    }\n    at_(index) {\n        return this.u32_[SharedRingBufferU32.HEADER_SIZE / 4 + index];\n    }\n    setAt_(index, value) {\n        this.u32_[SharedRingBufferU32.HEADER_SIZE / 4 + index] = value;\n    }\n    push(value) {\n        const begin = this.begin_;\n        const end = this.end_;\n        // If the buffer is full, return false.\n        if (begin === (end + 1) % this.maxLength)\n            return false;\n        // Write the value to the buffer.\n        this.setAt_(end, value);\n        ++this.end_;\n        return true;\n    }\n    pop() {\n        const begin = this.begin_;\n        const end = this.end_;\n        // If the buffer is empty, return undefined.\n        if (begin === end)\n            return undefined;\n        // Read the value from the buffer.\n        const value = this.at_(begin);\n        ++this.begin_;\n        return value;\n    }\n    popAll() {\n        const begin = this.begin_;\n        const end = this.end_;\n        // If the buffer is empty, return empty array.\n        if (begin === end)\n            return [];\n        // Read the values from the buffer. End might be less than begin if the buffer has wrapped.\n        // 10 - 8 + 2 \n        const length = end > begin\n            ? end - begin\n            : this.maxLength - begin + end;\n        const values = new Array(length);\n        if (end > begin) {\n            for (let i = begin; i < end; ++i)\n                values[i - begin] = this.at_(i);\n        }\n        else {\n            for (let i = begin; i < this.maxLength; ++i)\n                values[i - begin] = this.at_(i);\n            for (let i = 0; i < end; ++i)\n                values[this.maxLength - begin + i] = this.at_(i);\n        }\n        this.begin_ = end;\n        return values;\n    }\n}\nSharedRingBufferU32.HEADER_SIZE = 8;\nSharedRingBufferU32.BEGIN_INDEX = 0;\nSharedRingBufferU32.END_INDEX = 1;\nexport default SharedRingBufferU32;\n","import SharedRingBufferU32 from './SharedRingBufferU32';\nclass SharedRingBufferUtf32 {\n    constructor(ringBufferOrSharedArrayBuffer) {\n        if (ringBufferOrSharedArrayBuffer instanceof SharedRingBufferU32) {\n            this.ringBufferU32_ = ringBufferOrSharedArrayBuffer;\n        }\n        else {\n            this.ringBufferU32_ = new SharedRingBufferU32(ringBufferOrSharedArrayBuffer);\n        }\n    }\n    get sharedArrayBuffer() { return this.ringBufferU32_.sharedArrayBuffer; }\n    static create(maxLength) {\n        return new SharedRingBufferUtf32(SharedRingBufferU32.create(maxLength));\n    }\n    get maxLength() {\n        return this.ringBufferU32_.maxLength;\n    }\n    push(value) {\n        return this.ringBufferU32_.push(value);\n    }\n    // Push a string to the buffer. The number of characters written is returned.\n    pushString(value) {\n        let i = 0;\n        for (const codePoint of value) {\n            if (!this.push(codePoint.codePointAt(0)))\n                break;\n            ++i;\n        }\n        return i;\n    }\n    pushStringBlocking(value) {\n        let working = value;\n        while (working.length > 0) {\n            const written = this.pushString(working);\n            if (written === 0)\n                continue;\n            working = working.slice(written);\n        }\n    }\n    pop() {\n        return this.ringBufferU32_.pop();\n    }\n    popAll() {\n        return this.ringBufferU32_.popAll();\n    }\n    // Pop a string from the buffer. The read string is returned.\n    popString() {\n        return String.fromCodePoint(...this.popAll());\n    }\n}\nexport default SharedRingBufferUtf32;\n","// This file interacts with many untyped things, unfortunately.\n// The following ESLint rules are disabled:\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unsafe-assignment */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable @typescript-eslint/no-unsafe-call */\nimport registersDevice from './registersDevice';\nlet python;\nif (SIMULATOR_HAS_CPYTHON) {\n    // This is on a non-standard path specified in the webpack config.\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const PythonEmscripten = require('python.js');\n    /**\n     * Initializes the Python interpreter.\n     */\n    python = (params) => __awaiter(void 0, void 0, void 0, function* () {\n        const libkipr = yield fetch('/libkipr/python/kipr.wasm');\n        const libkiprBuffer = yield libkipr.arrayBuffer();\n        const kiprPy = yield fetch('/libkipr/python/binding/python/package/src/kipr/kipr.py');\n        const kiprPyBuffer = yield kiprPy.text();\n        yield PythonEmscripten.default(Object.assign({ locateFile: (path, prefix) => {\n                return `/cpython/${path}`;\n            }, preRun: [function (module) {\n                    const a = module.FS.makedev(64, 0);\n                    module.FS.registerDevice(a, registersDevice({\n                        registers: params.registers\n                    }));\n                    module.FS.mkdev('/registers', a);\n                    module.FS.mkdir('/kipr');\n                    module.FS.writeFile('/kipr/_kipr.so', new Uint8Array(libkiprBuffer));\n                    module.FS.writeFile('/kipr/__init__.py', kiprPyBuffer);\n                    module.FS.writeFile('main.py', `\nimport sys\nsys.path.append('/')\nsys.path.append('/kipr')\ndel sys\n${params.code}\n  `);\n                }], arguments: ['main.py'] }, params));\n    });\n}\nelse {\n    // eslint-disable-next-line @typescript-eslint/require-await\n    python = (params) => __awaiter(void 0, void 0, void 0, function* () {\n        params.printErr('Python is not available.');\n    });\n}\nexport default python;\n","export default (params) => {\n    const { registers } = params;\n    const outBuffer = [];\n    return {\n        write: (stream, buffer, offset, length, position) => {\n            const uBuffer = new Uint8Array(buffer);\n            for (let i = 0; i < length;) {\n                const requestType = uBuffer[offset + i + 0];\n                const address = uBuffer[offset + i + 1];\n                const size = uBuffer[offset + i + 2];\n                i += 3;\n                switch (requestType) {\n                    // REQUEST_READ\n                    case 0: {\n                        switch (size) {\n                            case 1: {\n                                outBuffer.push(registers.getRegisterValue8b(address));\n                                break;\n                            }\n                            case 2: {\n                                const value = registers.getRegisterValue16b(address);\n                                outBuffer.push((value & 0xFF00) >> 8);\n                                outBuffer.push((value & 0x00FF) >> 0);\n                                break;\n                            }\n                            case 4: {\n                                const value = registers.getRegisterValue32b(address);\n                                outBuffer.push((value & 0xFF000000) >> 24);\n                                outBuffer.push((value & 0x00FF0000) >> 16);\n                                outBuffer.push((value & 0x0000FF00) >> 8);\n                                outBuffer.push((value & 0x000000FF) >> 0);\n                                break;\n                            }\n                        }\n                        break;\n                    }\n                    // REQUEST_WRITE\n                    case 1: {\n                        switch (size) {\n                            case 1: {\n                                registers.setRegister8b(address, uBuffer[offset + i]);\n                                ++i;\n                                break;\n                            }\n                            case 2: {\n                                registers.setRegister16b(address, ((uBuffer[offset + i + 0] << 8) |\n                                    (uBuffer[offset + i + 1] << 0)));\n                                i += 2;\n                                break;\n                            }\n                            case 4: {\n                                registers.setRegister32b(address, ((uBuffer[offset + i + 0] << 24) |\n                                    (uBuffer[offset + i + 1] << 16) |\n                                    (uBuffer[offset + i + 2] << 8) |\n                                    (uBuffer[offset + i + 3] << 0)));\n                                i += 4;\n                                break;\n                            }\n                        }\n                        break;\n                    }\n                    default: {\n                        throw new Error(`Unknown request type: ${requestType}`);\n                    }\n                }\n            }\n            return length;\n        },\n        read: (stream, buffer, offset, length, position) => {\n            if (outBuffer.length < length) {\n                throw new Error('Too much data requested');\n            }\n            for (let i = 0; i < length; i++) {\n                buffer[offset + i] = outBuffer.shift();\n            }\n            return length;\n        }\n    };\n};\n","export default (code, context, print, printErr) => {\n    const mod = {\n        context,\n        print,\n        printErr,\n    };\n    // Disable eslint rule - dynamic evaluation of user code is needed here\n    // eslint-disable-next-line @typescript-eslint/no-implied-eval\n    new Function(\"Module\", `\"use strict\"; ${code}`)(mod);\n    return mod;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport dynRequire from './require';\nimport SharedRegisters from './SharedRegisters';\nimport python from './python';\nimport SharedRingBufferUtf32 from './SharedRingBufferUtf32';\n// Proper typing of Worker is tricky due to conflicting DOM and WebWorker types\n// See GitHub issue: https://github.com/microsoft/TypeScript/issues/20595\nconst ctx = self;\nlet sharedRegister_;\nlet sharedConsole_;\nconst print = (stdout) => {\n    sharedConsole_.pushStringBlocking(`${stdout}\\n`);\n};\nconst printErr = (stderror) => {\n    sharedConsole_.pushStringBlocking(`${stderror}\\n`);\n};\nvar ExitStatusError;\n(function (ExitStatusError) {\n    ExitStatusError.isExitStatusError = (e) => typeof e === 'object' && e['name'] === 'ExitStatus';\n})(ExitStatusError || (ExitStatusError = {}));\nconst startC = (message) => {\n    // message.code contains the user's code compiled to javascript\n    let stoppedSent = false;\n    const sendStopped = () => {\n        if (stoppedSent)\n            return;\n        ctx.postMessage({\n            type: 'stopped',\n        });\n        stoppedSent = true;\n    };\n    // dynRequire is a function that takes a string of javascript code and returns a module (a function that is executed when called)\n    const mod = dynRequire(message.code, {\n        setRegister8b: (address, value) => sharedRegister_.setRegister8b(address, value),\n        setRegister16b: (address, value) => sharedRegister_.setRegister16b(address, value),\n        setRegister32b: (address, value) => sharedRegister_.setRegister32b(address, value),\n        readRegister8b: (address) => sharedRegister_.getRegisterValue8b(address),\n        readRegister16b: (address) => sharedRegister_.getRegisterValue16b(address),\n        readRegister32b: (address) => sharedRegister_.getRegisterValue32b(address),\n        onStop: sendStopped\n    }, print, printErr);\n    mod.onRuntimeInitialized = () => {\n        try {\n            mod._main();\n        }\n        catch (e) {\n            if (ExitStatusError.isExitStatusError(e)) {\n                print(`Program exited with status code ${e.status}`);\n            }\n            else if (e instanceof Error) {\n                printErr(e.message);\n            }\n            else {\n                printErr(`Program exited with an unknown error`);\n            }\n        }\n        finally {\n            sendStopped();\n        }\n    };\n    ctx.postMessage({\n        type: 'start'\n    });\n};\nconst runEventLoop = () => new Promise((resolve, reject) => setTimeout(resolve, 5));\nconst startPython = (message) => __awaiter(void 0, void 0, void 0, function* () {\n    ctx.postMessage({\n        type: 'start'\n    });\n    yield runEventLoop();\n    yield python({\n        code: message.code,\n        print,\n        printErr,\n        registers: sharedRegister_,\n    });\n});\nconst start = (message) => __awaiter(void 0, void 0, void 0, function* () {\n    switch (message.language) {\n        case 'c':\n        case 'cpp': {\n            startC(message);\n            break;\n        }\n        case 'python': {\n            try {\n                yield startPython(message);\n            }\n            catch (e) {\n                printErr(e);\n            }\n            finally {\n                ctx.postMessage({\n                    type: 'stopped',\n                });\n            }\n            break;\n        }\n    }\n});\nctx.onmessage = (e) => {\n    const message = e.data;\n    switch (message.type) {\n        case 'start': {\n            void start(message);\n            break;\n        }\n        case 'set-shared-registers': {\n            sharedRegister_ = new SharedRegisters(message.sharedArrayBuffer);\n            break;\n        }\n        case 'set-shared-console': {\n            sharedConsole_ = new SharedRingBufferUtf32(message.sharedArrayBuffer);\n            break;\n        }\n    }\n};\n// Notify main thread that worker is ready for messages\nctx.postMessage({\n    type: 'worker-ready',\n});\n"],"mappingsnLA;AAqLA;AACA;AACA;AACA;AACA;AAJA;;A;;;;;;;;;;;;;ACrLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AA3CA;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AAEA;AACA;;A;;;;;;;;;;;;ACxEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAGA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAvFA;AACA;AAuFA;AACA;AACA;AACA;;A;;;;;;;;;;;;;AC3FA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAhDA;AACA;AAgDA;;A;;;;;;;;;;;;;AClDA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAlBA;AAmBA;AACA,SAMA;AACA;AAAA;;A;;;;;;;;;;;;ACxDA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlBA;AACA;AAmBA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAIA;AACA;AACA;AAnBA;AACA;AAoBA;AACA;AACA;AAAA;AAAA;AACA;AACA;AApDA;AAsDA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAzEA;AA2EA;;A;;;;;;;;;;;;AC9EA;AACA;AACA;AACA;AACA;AAHA;AAMA;AACA;AAAA;AACA;AACA;;A;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;ACNA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AADA;AAGA;AACA;AAAA;AACA;AAnBA;AAqBA;AACA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAZA;AAcA;AACA;AACA;AAAA;AACA;AADA;;;;A","sourceRoot":""}